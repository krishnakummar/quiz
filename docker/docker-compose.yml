version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: proquiz-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - proquiz-network

  # Backend API (example - you'll need to implement this)
  backend:
    image: proquiz-backend:latest  # Build this separately
    container_name: proquiz-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=proquiz_db
      - DB_USER=proquiz_user
      - DB_PASSWORD=secure_password
      - JWT_SECRET=your_jwt_secret_key
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - proquiz-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: proquiz-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=proquiz_db
      - MYSQL_USER=proquiz_user
      - MYSQL_PASSWORD=secure_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: unless-stopped
    networks:
      - proquiz-network

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: proquiz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - proquiz-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: proquiz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - proquiz-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  proquiz-network:
    driver: bridge